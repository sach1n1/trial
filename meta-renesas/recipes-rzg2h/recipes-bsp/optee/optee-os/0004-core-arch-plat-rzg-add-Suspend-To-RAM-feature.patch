From 95f2716be1b5e1e40d2f86411c621e1c246d9928 Mon Sep 17 00:00:00 2001
From: hienhuynh <hien.huynh.px@renesas.com>
Date: Thu, 29 Apr 2021 14:40:19 +0700
Subject: [PATCH 4/5] core: arch: plat-rzg: add Suspend To RAM feature

This patch will add Suspend to RAM feature for platform rzg
Reference RCar repo:
https://github.com/renesas-rcar/optee_os/commit/3bc428825ee37409b3e0827e6e0b8688d1b2ab81

Signed-off-by: Huynh Thanh Hung <hung.huynh.wz@renesas.com>
Signed-off-by: hienhuynh <hien.huynh.px@renesas.com>
---
 core/arch/arm/plat-rzg/conf.mk              |   1 +
 core/arch/arm/plat-rzg/kern.ld.S            | 510 ++++++++++++++++++++++++++++
 core/arch/arm/plat-rzg/link.mk              |  14 +
 core/arch/arm/plat-rzg/link_dummy.ld        |  98 ++++++
 core/arch/arm/plat-rzg/main.c               |  60 ++++
 core/arch/arm/plat-rzg/rzg_common.h         |   8 +
 core/arch/arm/plat-rzg/rzg_suspend_to_ram.c | 180 ++++++++++
 core/arch/arm/plat-rzg/rzg_suspend_to_ram.h |  62 ++++
 core/arch/arm/plat-rzg/sub.mk               |   8 +-
 9 files changed, 940 insertions(+), 1 deletion(-)
 create mode 100644 core/arch/arm/plat-rzg/kern.ld.S
 create mode 100644 core/arch/arm/plat-rzg/link_dummy.ld
 create mode 100644 core/arch/arm/plat-rzg/rzg_suspend_to_ram.c
 create mode 100644 core/arch/arm/plat-rzg/rzg_suspend_to_ram.h

diff --git a/core/arch/arm/plat-rzg/conf.mk b/core/arch/arm/plat-rzg/conf.mk
index cd3d04a..71e4048 100644
--- a/core/arch/arm/plat-rzg/conf.mk
+++ b/core/arch/arm/plat-rzg/conf.mk
@@ -28,6 +28,7 @@ $(call force,CFG_CORE_CLUSTER_SHIFT,1)
 endif
 ifeq ($(PLATFORM_FLAVOR),hihope_rzg2n)
 $(call force,CFG_TEE_CORE_NB_CORE,2)
+PMIC_ROHM_BD9571 ?= 0
 endif
 ifeq ($(PLATFORM_FLAVOR),hihope_rzg2h)
 $(call force,CFG_TEE_CORE_NB_CORE,8)
diff --git a/core/arch/arm/plat-rzg/kern.ld.S b/core/arch/arm/plat-rzg/kern.ld.S
new file mode 100644
index 0000000..5fbe131
--- /dev/null
+++ b/core/arch/arm/plat-rzg/kern.ld.S
@@ -0,0 +1,510 @@
+/* SPDX-License-Identifier: (BSD-2-Clause AND MIT) */
+/*
+ * Copyright (c) 2014, Linaro Limited
+ * Copyright (c) 2019-2020, Renesas Electronics Corporation
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/*
+ * Copyright (c) 2008-2010 Travis Geiselbrecht
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files
+ * (the "Software"), to deal in the Software without restriction,
+ * including without limitation the rights to use, copy, modify, merge,
+ * publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so,
+ * subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+ * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+ * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+ * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#include <mm/core_mmu.h>
+#include <platform_config.h>
+#include <util.h>
+
+/*
+ * TEE_RAM_VA_START:            The start virtual address of the TEE RAM
+ * TEE_TEXT_VA_START:           The start virtual address of the OP-TEE text
+ */
+#define TEE_RAM_VA_START        TEE_RAM_START
+#define TEE_TEXT_VA_START       (TEE_RAM_VA_START + \
+					(TEE_LOAD_ADDR - TEE_RAM_START))
+
+OUTPUT_FORMAT(CFG_KERN_LINKER_FORMAT)
+OUTPUT_ARCH(CFG_KERN_LINKER_ARCH)
+
+ENTRY(_start)
+SECTIONS
+{
+	. = TEE_TEXT_VA_START;
+#ifdef ARM32
+	ASSERT(!(TEE_TEXT_VA_START & 31), "text start should align to 32bytes")
+#endif
+#ifdef ARM64
+	ASSERT(!(TEE_TEXT_VA_START & 127), "text start should align to 128bytes")
+#endif
+	__text_start = .;
+
+	/*
+	 * Memory between TEE_TEXT_VA_START and page aligned rounded down
+	 * value will be mapped with unpaged "text" section attributes:
+	 * likely to be read-only/executable.
+	 */
+	__flatmap_unpg_rx_start = ROUNDDOWN(__text_start, SMALL_PAGE_SIZE);
+
+	.text : {
+		KEEP(*(.text._start))
+		__identity_map_init_start = .;
+		*(.identity_map .identity_map.* \
+			/*
+			 * The one below is needed because it's a weak
+			 * symbol that may be overridden by platform
+			 * specific code.
+			 */
+		  .text.get_core_pos_mpidr)
+		__identity_map_init_end = .;
+		KEEP(*(.text.init .text.plat_cpu_reset_early \
+		       .text.reset .text.reset_primary .text.unhandled_cpu \
+		       .text.__assert_flat_mapped_range))
+
+		. = ALIGN(8);
+		__suspend_to_ram_backup_start = .;
+		KEEP(*(.suspend_to_ram_backup))
+		__suspend_to_ram_backup_end = .;
+
+		. = ALIGN(8);
+		__suspend_to_ram_backup_num_start = .;
+		KEEP(*(.suspend_to_ram_backup_num))
+		__suspend_to_ram_backup_num_end = .;
+
+		. = ALIGN(8);
+		__suspend_to_ram_cbfunc_start = .;
+		KEEP(*(.suspend_to_ram_cbfunc))
+		__suspend_to_ram_cbfunc_end = .;
+
+#ifdef CFG_WITH_PAGER
+		*(.text)
+/* Include list of sections needed for paging */
+#include <text_unpaged.ld.S>
+#else
+		*(.text .text.*)
+#endif
+		*(.sram.text.glue_7* .gnu.linkonce.t.*)
+		. = ALIGN(8);
+	}
+	__text_end = .;
+
+#ifdef CFG_CORE_RODATA_NOEXEC
+	. = ALIGN(SMALL_PAGE_SIZE);
+#endif
+	__flatmap_unpg_rx_size = . - __flatmap_unpg_rx_start;
+	__flatmap_unpg_ro_start = .;
+
+	.rodata : ALIGN(8) {
+		__rodata_start = .;
+		*(.gnu.linkonce.r.*)
+#ifdef CFG_WITH_PAGER
+		*(.rodata .rodata.__unpaged)
+#include <rodata_unpaged.ld.S>
+#else
+#ifdef CFG_DT
+		__rodata_dtdrv_start = .;
+		KEEP(*(.rodata.dtdrv))
+		__rodata_dtdrv_end = .;
+#endif
+#ifdef CFG_EARLY_TA
+		. = ALIGN(8);
+		__rodata_early_ta_start = .;
+		KEEP(*(.rodata.early_ta))
+		__rodata_early_ta_end = .;
+#endif
+
+		*(.rodata .rodata.*)
+		. = ALIGN(8);
+		KEEP(*(SORT(.scattered_array*)));
+#endif
+		. = ALIGN(8);
+		__rodata_end = .;
+	}
+
+	.got : { *(.got.plt) *(.got) }
+	.plt : { *(.plt) }
+
+	.ctors : ALIGN(8) {
+		__ctor_list = .;
+		KEEP(*(.ctors .ctors.* .init_array .init_array.*))
+		__ctor_end = .;
+	}
+	.dtors : ALIGN(8) {
+		__dtor_list = .;
+		KEEP(*(.dtors .dtors.* .fini_array .fini_array.*))
+		__dtor_end = .;
+	}
+
+	/* .ARM.exidx is sorted, so has to go in its own output section.  */
+	.ARM.exidx : {
+		__exidx_start = .;
+		*(.ARM.exidx* .gnu.linkonce.armexidx.*)
+		__exidx_end = .;
+	}
+
+	.ARM.extab : {
+		__extab_start = .;
+		*(.ARM.extab*)
+		__extab_end = .;
+	}
+
+	/* Start page aligned read-write memory */
+#ifdef CFG_CORE_RWDATA_NOEXEC
+	. = ALIGN(SMALL_PAGE_SIZE);
+#endif
+	__flatmap_unpg_ro_size = . - __flatmap_unpg_ro_start;
+
+#ifdef CFG_VIRTUALIZATION
+	__flatmap_nex_rw_start = . ;
+	.nex_data : ALIGN(8) {
+		*(.nex_data .nex_data.*)
+	}
+
+	.nex_bss : ALIGN(8) {
+		__nex_bss_start = .;
+		*(.nex_bss .nex_bss.*)
+		__nex_bss_end = .;
+	}
+
+	/*
+	 * We want to keep all nexus memory in one place, because
+	 * it should be always mapped and it is easier to map one
+	 * memory region than two.
+	 * Next section are NOLOAD ones, but they are followed
+	 * by sections with data. Thus, this NOLOAD section will
+	 * be included in the resulting binary, filled with zeroes
+	 */
+	.nex_stack (NOLOAD) : {
+		__nozi_stack_start = .;
+		KEEP(*(.nozi_stack.stack_tmp .nozi_stack.stack_abt))
+		. = ALIGN(8);
+		__nozi_stack_end = .;
+	}
+
+	.nex_heap (NOLOAD) : {
+		__nex_heap_start = .;
+		. += CFG_CORE_NEX_HEAP_SIZE;
+		. = ALIGN(16 * 1024);
+		__nex_heap_end = .;
+	}
+	.nex_nozi (NOLOAD) : {
+		ASSERT(!(ABSOLUTE(.) & (16 * 1024 - 1)), "align nozi to 16kB");
+		KEEP(*(.nozi.mmu.l1 .nozi.mmu.l2))
+	}
+
+	. = ALIGN(SMALL_PAGE_SIZE);
+
+	__flatmap_nex_rw_size = . - __flatmap_nex_rw_start;
+	__flatmap_nex_rw_end = .;
+#endif
+
+	__flatmap_unpg_rw_start = .;
+
+	.data : ALIGN(8) {
+		/* writable data  */
+		__data_start_rom = .;
+		/* in one segment binaries, the rom data address is on top
+		   of the ram data address */
+		__data_start = .;
+		*(.data .data.* .gnu.linkonce.d.*)
+		. = ALIGN(8);
+	}
+
+	/* unintialized data */
+	.bss : {
+		__data_end = .;
+		__bss_start = .;
+		*(.bss .bss.*)
+		*(.gnu.linkonce.b.*)
+		*(COMMON)
+		. = ALIGN(8);
+		__bss_end = .;
+	}
+
+	.heap1 (NOLOAD) : {
+		/*
+		 * We're keeping track of the padding added before the
+		 * .nozi section so we can do something useful with
+		 * this otherwise wasted memory.
+		 */
+		__heap1_start = .;
+#ifndef CFG_WITH_PAGER
+		. += CFG_CORE_HEAP_SIZE;
+#endif
+#ifdef CFG_WITH_LPAE
+		. = ALIGN(4 * 1024);
+#else
+		. = ALIGN(16 * 1024);
+#endif
+		__heap1_end = .;
+	}
+	/*
+	 * Uninitialized data that shouldn't be zero initialized at
+	 * runtime.
+	 *
+	 * L1 mmu table requires 16 KiB alignment
+	 */
+	.nozi (NOLOAD) : {
+		__nozi_start = .;
+		KEEP(*(.nozi .nozi.*))
+		. = ALIGN(16);
+		__nozi_end = .;
+		/*
+		 * If virtualization is enabled, abt and tmp stacks will placed
+		 * at above .nex_stack section and thread stacks will go there
+		 */
+		__nozi_stack_start = .;
+		KEEP(*(.nozi_stack .nozi_stack.*))
+		. = ALIGN(8);
+		__nozi_stack_end = .;
+	}
+
+#ifdef CFG_WITH_PAGER
+	.heap2 (NOLOAD) : {
+		__heap2_start = .;
+		/*
+		 * Reserve additional memory for heap, the total should be
+		 * at least CFG_CORE_HEAP_SIZE, but count what has already
+		 * been reserved in .heap1
+		 */
+		. += CFG_CORE_HEAP_SIZE - (__heap1_end - __heap1_start);
+		. = ALIGN(SMALL_PAGE_SIZE);
+		__heap2_end = .;
+	}
+
+	/* Start page aligned read-only memory */
+	__flatmap_unpg_rw_size = . - __flatmap_unpg_rw_start;
+
+	__init_start = .;
+	__flatmap_init_rx_start = .;
+
+	ASSERT(!(__flatmap_init_rx_start & (SMALL_PAGE_SIZE - 1)),
+		"read-write memory is not paged aligned")
+
+	.text_init : {
+/*
+ * Include list of sections needed for boot initialization, this list
+ * overlaps with unpaged.ld.S but since unpaged.ld.S is first all those
+ * sections will go into the unpaged area.
+ */
+#include <text_init.ld.S>
+		KEEP(*(.text.startup.*));
+		/* Make sure constructor functions are available during init */
+		KEEP(*(.text._GLOBAL__sub_*));
+		. = ALIGN(8);
+	}
+
+#ifdef CFG_CORE_RODATA_NOEXEC
+	. = ALIGN(SMALL_PAGE_SIZE);
+#endif
+	__flatmap_init_rx_size = . - __flatmap_init_rx_start;
+	__flatmap_init_ro_start = .;
+
+	.rodata_init : {
+#include <rodata_init.ld.S>
+
+		. = ALIGN(8);
+		KEEP(*(SORT(.scattered_array*)));
+
+		. = ALIGN(8);
+		__rodata_init_end = .;
+	}
+	__rodata_init_end = .;
+
+	__init_end = ROUNDUP(__rodata_init_end, SMALL_PAGE_SIZE);
+	__get_tee_init_end = __init_end;
+	__init_size = __init_end - __init_start;
+
+	/* vcore flat map stops here. No need to page align, rodata follows. */
+	__flatmap_init_ro_size = __init_end - __flatmap_init_ro_start;
+
+	.rodata_pageable : ALIGN(8) {
+#ifdef CFG_DT
+		__rodata_dtdrv_start = .;
+		KEEP(*(.rodata.dtdrv))
+		__rodata_dtdrv_end = .;
+#endif
+#ifdef CFG_EARLY_TA
+		. = ALIGN(8);
+		__rodata_early_ta_start = .;
+		KEEP(*(.rodata.early_ta))
+		__rodata_early_ta_end = .;
+#endif
+		*(.rodata*)
+	}
+
+#ifdef CFG_CORE_RODATA_NOEXEC
+	. = ALIGN(SMALL_PAGE_SIZE);
+#endif
+
+	.text_pageable : ALIGN(8) {
+		*(.text*)
+		. = ALIGN(SMALL_PAGE_SIZE);
+	}
+
+	__pageable_part_end = .;
+	__pageable_part_start = __init_end;
+	__pageable_start = __init_start;
+	__pageable_end = __pageable_part_end;
+
+	ASSERT(TEE_LOAD_ADDR >= TEE_RAM_START,
+		"Load address before start of physical memory")
+	ASSERT(TEE_LOAD_ADDR < (TEE_RAM_START + TEE_RAM_PH_SIZE),
+		"Load address after end of physical memory")
+	ASSERT((TEE_RAM_VA_START + TEE_RAM_PH_SIZE - __init_end) >
+		SMALL_PAGE_SIZE, "Too few free pages to initialize paging")
+
+
+#endif /*CFG_WITH_PAGER*/
+
+#ifdef CFG_CORE_SANITIZE_KADDRESS
+	. = TEE_RAM_VA_START + (TEE_RAM_VA_SIZE * 8) / 9 - 8;
+	. = ALIGN(8);
+	.asan_shadow : {
+		__asan_shadow_start = .;
+		. += TEE_RAM_VA_SIZE / 9;
+		__asan_shadow_end = .;
+		__asan_shadow_size = __asan_shadow_end - __asan_shadow_start;
+	}
+#endif /*CFG_CORE_SANITIZE_KADDRESS*/
+
+	__end = .;
+
+#ifndef CFG_WITH_PAGER
+	__init_size = __data_end - TEE_TEXT_VA_START;
+#endif
+	/*
+	 * Guard against moving the location counter backwards in the assignment
+	 * below.
+	 */
+	ASSERT(. <= (TEE_RAM_VA_START + TEE_RAM_VA_SIZE),
+		"TEE_RAM_VA_SIZE is too small")
+	. = TEE_RAM_VA_START + TEE_RAM_VA_SIZE;
+
+	_end_of_ram = .;
+
+#ifndef CFG_WITH_PAGER
+	__flatmap_unpg_rw_size = _end_of_ram - __flatmap_unpg_rw_start;
+	__get_tee_init_end = .;
+#endif
+
+	/*
+	 * These regions will not become a normal part of the dumped
+	 * binary, instead some are interpreted by the dump script and
+	 * converted into suitable format for OP-TEE itself to use.
+	 */
+	.dynamic : { *(.dynamic) }
+	.hash : { *(.hash) }
+	.dynsym : { *(.dynsym) }
+	.dynstr : { *(.dynstr) }
+
+	.rel : {
+		*(.rel.*)
+	}
+	.rela : {
+		*(.rela.*)
+	}
+#ifndef CFG_CORE_ASLR
+	ASSERT(SIZEOF(.rel) == 0, "Relocation entries not expected")
+	ASSERT(SIZEOF(.rela) == 0, "Relocation entries not expected")
+#endif
+
+	/DISCARD/ : {
+		/* Strip unnecessary stuff */
+		*(.comment .note .eh_frame .interp)
+		/* Strip meta variables */
+		*(__keep_meta_vars*)
+	}
+
+	ASSERT(__dtor_end <= TEE_SHMEM_START, "OPTEE image has exceeded its limit.")
+}
+
+/* Unpaged read-only memories */
+__vcore_unpg_rx_start = __flatmap_unpg_rx_start;
+__vcore_unpg_ro_start = __flatmap_unpg_ro_start;
+#ifdef CFG_CORE_RODATA_NOEXEC
+__vcore_unpg_rx_size = __flatmap_unpg_rx_size;
+__vcore_unpg_ro_size = __flatmap_unpg_ro_size;
+#else
+__vcore_unpg_rx_size = __flatmap_unpg_rx_size + __flatmap_unpg_ro_size;
+__vcore_unpg_ro_size = 0;
+#endif
+
+/* Unpaged read-write memory */
+__vcore_unpg_rw_start = __flatmap_unpg_rw_start;
+__vcore_unpg_rw_size = __flatmap_unpg_rw_size;
+
+#ifdef CFG_VIRTUALIZATION
+/* Nexus read-write memory */
+__vcore_nex_rw_start = __flatmap_nex_rw_start;
+__vcore_nex_rw_size = __flatmap_nex_rw_size;
+#endif
+
+#ifdef CFG_WITH_PAGER
+/*
+ * Core init mapping shall cover up to end of the physical RAM.
+ * This is required since the hash table is appended to the
+ * binary data after the firmware build sequence.
+ */
+#define __FLATMAP_PAGER_TRAILING_SPACE	\
+	(TEE_RAM_START + TEE_RAM_PH_SIZE - \
+		(__flatmap_init_ro_start + __flatmap_init_ro_size))
+
+/* Paged/init read-only memories */
+__vcore_init_rx_start = __flatmap_init_rx_start;
+__vcore_init_ro_start = __flatmap_init_ro_start;
+#ifdef CFG_CORE_RODATA_NOEXEC
+__vcore_init_rx_size = __flatmap_init_rx_size;
+__vcore_init_ro_size = __flatmap_init_ro_size + __FLATMAP_PAGER_TRAILING_SPACE;
+#else
+__vcore_init_rx_size = __flatmap_init_rx_size + __flatmap_init_ro_size +
+		       __FLATMAP_PAGER_TRAILING_SPACE;
+__vcore_init_ro_size = 0;
+#endif /* CFG_CORE_RODATA_NOEXEC */
+#endif /* CFG_WITH_PAGER */
+
+#ifdef CFG_CORE_SANITIZE_KADDRESS
+__asan_map_start = (__asan_shadow_start / SMALL_PAGE_SIZE) *
+		   SMALL_PAGE_SIZE;
+__asan_map_end = ((__asan_shadow_end - 1) / SMALL_PAGE_SIZE) *
+		 SMALL_PAGE_SIZE + SMALL_PAGE_SIZE;
+__asan_map_size = __asan_map_end - __asan_map_start;
+#endif /*CFG_CORE_SANITIZE_KADDRESS*/
diff --git a/core/arch/arm/plat-rzg/link.mk b/core/arch/arm/plat-rzg/link.mk
index 229c4b7..3d4b342 100644
--- a/core/arch/arm/plat-rzg/link.mk
+++ b/core/arch/arm/plat-rzg/link.mk
@@ -1,3 +1,17 @@
 include core/arch/arm/kernel/link.mk
 
+link-script-dummy ::= $(platform-dir)/link_dummy.ld
+ldargs-all_objs := -T $(link-script-dummy) --no-check-sections \
+                   $(link-objs) $(link-ldadd) $(libgcccore)
+unpaged-ldargs = -T $(link-script-dummy) --no-check-sections --gc-sections
+init-ldargs := -T $(link-script-dummy) --no-check-sections --gc-sections
+
 all: $(link-out-dir)/tee.srec
+cleanfiles += $(link-out-dir)/tee.srec
+$(link-out-dir)/tee.srec: $(link-out-dir)/tee-raw.bin
+	@$(cmd-echo-silent) '  SREC    $@'
+	$(q)$(OBJCOPYcore) -I binary -O srec $< $@
+cleanfiles += $(link-out-dir)/tee-raw.bin
+$(link-out-dir)/tee-raw.bin: $(link-out-dir)/tee.elf scripts/gen_tee_bin.py
+	@$(cmd-echo-silent) '  GEN     $@'
+	$(q)scripts/gen_tee_bin.py --input $< --out_tee_raw_bin $@
diff --git a/core/arch/arm/plat-rzg/link_dummy.ld b/core/arch/arm/plat-rzg/link_dummy.ld
new file mode 100644
index 0000000..1efc585
--- /dev/null
+++ b/core/arch/arm/plat-rzg/link_dummy.ld
@@ -0,0 +1,98 @@
+/* SPDX-License-Identifier: BSD-2-Clause */
+/*
+ * Copyright (c) 2017, Linaro Limited
+ * Copyright (c) 2019-2020, Renesas Electronics Corporation
+ */
+
+SECTIONS
+{
+	/*
+	 * This seems to make the ARMv7 linker happy with regards to glue_7
+	 * sections etc.
+	 */
+	..dummy : { }
+}
+
+__asan_map_end = .;
+__asan_map_size = .;
+__asan_map_start = .;
+__asan_shadow_end = .;
+__asan_shadow_size = .;
+__asan_shadow_start = .;
+__bss_end = .;
+__bss_start = .;
+__ctor_end = .;
+__ctor_list = .;
+__data_end = .;
+__data_start = .;
+__end = .;
+__end_phys_ddr_overall_section = .;
+__end_phys_mem_map_section = .;
+__end_phys_nsec_ddr_section = .;
+__end_phys_sdp_mem_section = .;
+__exidx_end = .;
+__exidx_start = .;
+__extab_end = .;
+__extab_start = .;
+__heap1_end = .;
+__heap1_start = .;
+__heap2_end = .;
+__heap2_start = .;
+__identity_map_init_end = .;
+__identity_map_init_start = .;
+__initcall_end = .;
+__initcall_start = .;
+__init_end = .;
+__init_size = .;
+__init_start = .;
+__nex_bss_end = .;
+__nex_bss_start = .;
+__nex_heap_end = .;
+__nex_heap_start = .;
+__nozi_end = .;
+__nozi_stack_end = .;
+__nozi_stack_start = .;
+__nozi_start = .;
+__pageable_end = .;
+__pageable_part_end = .;
+__pageable_part_start = .;
+__pageable_start = .;
+__rela_end = .;
+__rela_start = .;
+__rel_end = .;
+__rel_start = .;
+__rodata_dtdrv_end = .;
+__rodata_dtdrv_start = .;
+__rodata_early_ta_end = .;
+__rodata_early_ta_start = .;
+__rodata_end = .;
+__rodata_start = .;
+__start_phys_ddr_overall_section = .;
+__start_phys_nsec_ddr_section = .;
+__text_init_start = .;
+__text_start = .;
+__tmp_hashes_end = .;
+__tmp_hashes_size = .;
+__tmp_hashes_start = .;
+__vcore_init_ro_size = .;
+__vcore_init_ro_start = .;
+__vcore_init_rx_size = .;
+__vcore_init_rx_start = .;
+__vcore_nex_rw_size = .;
+__vcore_nex_rw_start = .;
+__vcore_unpg_ro_size = .;
+__vcore_unpg_ro_start = .;
+__vcore_unpg_rw_size = .;
+__vcore_unpg_rw_start = .;
+__vcore_unpg_rx_size = .;
+__vcore_unpg_rx_start = .;
+__suspend_to_ram_backup_end = .;
+__suspend_to_ram_backup_start = .;
+__suspend_to_ram_backup_num_end = .;
+__suspend_to_ram_backup_num_start = .;
+__suspend_to_ram_cbfunc_end = .;
+__suspend_to_ram_cbfunc_start = .;
+PROVIDE(core_v_str = 0);
+PROVIDE(tee_entry_std = 0);
+PROVIDE(tee_svc_handler = 0);
+PROVIDE(init_teecore = 0);
diff --git a/core/arch/arm/plat-rzg/main.c b/core/arch/arm/plat-rzg/main.c
index 0409ef8..853a126 100644
--- a/core/arch/arm/plat-rzg/main.c
+++ b/core/arch/arm/plat-rzg/main.c
@@ -11,6 +11,15 @@
 #include <mm/core_memprot.h>
 #include <platform_config.h>
 
+#if defined(PLATFORM_FLAVOR_hihope_rzg2n)
+#if (PMIC_ROHM_BD9571)
+#include <kernel/spinlock.h>
+#include <kernel/boot.h>
+
+#include "rzg_suspend_to_ram.h"
+#endif
+#endif
+
 #include "rzg_common.h"
 
 register_phys_mem_pgdir(MEM_AREA_IO_SEC, DEVICE0_BASE, DEVICE0_SIZE);
@@ -29,6 +38,57 @@ register_dynamic_shm(NSEC_DDR_2_BASE, NSEC_DDR_2_SIZE);
 register_dynamic_shm(NSEC_DDR_3_BASE, NSEC_DDR_3_SIZE);
 #endif
 
+#if defined(PLATFORM_FLAVOR_hihope_rzg2n)
+#if (PMIC_ROHM_BD9571)
+static uint32_t suspend_to_ram_save_flag = 0U;
+static uint32_t main_cpu_lock = (uint32_t)SPINLOCK_UNLOCK;
+
+unsigned long thread_cpu_suspend_handler(unsigned long a0,
+					 unsigned long a1 __unused)
+{
+	uint32_t exceptions;
+
+	exceptions = cpu_spin_lock_xsave(&main_cpu_lock);
+	FMSG("a0=0x%lX, a1=0x%lX", a0, a1);
+
+	if (a0 >= TFW_ARG_SYSTEM_SUSPEND) {
+		if (suspend_to_ram_save_flag == 0U) {
+			suspend_to_ram_save();
+			suspend_to_ram_save_flag = 1U;
+			FMSG("END suspend_to_ram_save");
+		} else {
+			/* no operation */
+		}
+	} else {
+		/* in case of CPU_SUSPEND(CPU Idle), no operation */
+	}
+
+	cpu_spin_unlock_xrestore(&main_cpu_lock, exceptions);
+	return 0U;
+}
+
+unsigned long thread_cpu_resume_handler(unsigned long a0 __unused,
+                                unsigned long a1 __unused)
+{
+	uint32_t exceptions;
+
+	exceptions = cpu_spin_lock_xsave(&main_cpu_lock);
+	FMSG("a0=0x%lX, a1=0x%lX", a0, a1);
+
+	if (suspend_to_ram_save_flag == 1U) {
+		suspend_to_ram_restore();
+		suspend_to_ram_save_flag = 0U;
+		FMSG("END suspend_to_ram_restore");
+	} else {
+		/* no operation */
+	}
+
+	cpu_spin_unlock_xrestore(&main_cpu_lock, exceptions);
+	return 0U;
+}
+#endif
+#endif
+
 static struct scif_uart_data console_data __nex_bss;
 
 void console_init(void)
diff --git a/core/arch/arm/plat-rzg/rzg_common.h b/core/arch/arm/plat-rzg/rzg_common.h
index 7b41df9..5c3a03c 100644
--- a/core/arch/arm/plat-rzg/rzg_common.h
+++ b/core/arch/arm/plat-rzg/rzg_common.h
@@ -91,4 +91,12 @@
 #error "Unknown platform flavor"
 #endif
 
+#if defined(PLATFORM_FLAVOR_hihope_rzg2n)
+#if (PMIC_ROHM_BD9571)
+/* Parameters value passed from ARM Trusted FW */
+#define TFW_ARG_CPU_SUSPEND	(0x0UL)
+#define TFW_ARG_SYSTEM_SUSPEND	(0x1UL)
+#endif
+#endif
+
 #endif /* RZG_COMMON_H */
diff --git a/core/arch/arm/plat-rzg/rzg_suspend_to_ram.c b/core/arch/arm/plat-rzg/rzg_suspend_to_ram.c
new file mode 100644
index 0000000..3861b6d
--- /dev/null
+++ b/core/arch/arm/plat-rzg/rzg_suspend_to_ram.c
@@ -0,0 +1,180 @@
+// SPDX-License-Identifier: BSD-2-Clause
+/*
+ * Copyright (c) 2019-2020, Renesas Electronics Corporation
+ */
+
+#include <io.h>
+#include <trace.h>
+#include <initcall.h>
+#include <mm/core_memprot.h>
+#include <kernel/misc.h>
+#include "rzg_suspend_to_ram.h"
+
+extern struct reg_backup_info *__suspend_to_ram_backup_start;
+extern struct reg_backup_info *__suspend_to_ram_backup_end;
+extern size_t __suspend_to_ram_backup_num_start;
+extern size_t __suspend_to_ram_backup_num_end;
+extern backup_call_t __suspend_to_ram_cbfunc_start;
+extern backup_call_t __suspend_to_ram_cbfunc_end;
+
+typedef void (*backup_func_t)(struct reg_backup_info *bkinfo);
+
+static void call_backup_funcs(backup_func_t backup_func);
+static void convert_p2v_register(struct reg_backup_info *bkinfo);
+static void read_register(struct reg_backup_info *bkinfo,
+			union reg_backup_buf *bkbuf);
+static void write_register(struct reg_backup_info *bkinfo,
+			union reg_backup_buf *bkbuf);
+static void save_register(struct reg_backup_info *bkinfo);
+static void restore_register(struct reg_backup_info *bkinfo);
+static TEE_Result suspend_to_ram_init(void);
+
+static void call_backup_funcs(backup_func_t backup_func)
+{
+	struct reg_backup_info **section_info;
+	struct reg_backup_info *bkinfo;
+	size_t *section_info_num;
+	size_t bkinfo_num;
+	size_t cnt;
+
+	section_info = &__suspend_to_ram_backup_start;
+	section_info_num = &__suspend_to_ram_backup_num_start;
+
+	for (; section_info < &__suspend_to_ram_backup_end; section_info++) {
+		bkinfo = *section_info;
+		bkinfo_num = *section_info_num;
+		for(cnt = 0U; cnt < bkinfo_num; cnt++) {
+			if (backup_func != NULL) {
+				backup_func(&bkinfo[cnt]);
+			}
+		}
+		section_info_num++;
+	}
+}
+
+static void convert_p2v_register(struct reg_backup_info *bkinfo)
+{
+	bkinfo->reg_vaddr = (vaddr_t)phys_to_virt(bkinfo->reg_paddr,
+					MEM_AREA_IO_SEC, 0x4);
+	if (bkinfo->reg_vaddr == 0U) {
+		bkinfo->reg_vaddr = (vaddr_t)phys_to_virt(bkinfo->reg_paddr,
+						MEM_AREA_IO_NSEC, 0x4);
+		if (bkinfo->reg_vaddr == 0U) {
+			EMSG("Convert error! phys_to_virt reg_paddr=%08zX",
+				bkinfo->reg_paddr);
+		}
+	}
+	bkinfo->reg_buf.d32 = 0U;
+}
+
+static void read_register(struct reg_backup_info *bkinfo,
+			union reg_backup_buf *bkbuf)
+{
+	if (bkinfo->reg_vaddr != 0U) {
+		if (bkinfo->reg_rsize == 4) {
+			bkbuf->d32 = io_read32(bkinfo->reg_vaddr);
+		} else if (bkinfo->reg_rsize == 2) {
+			bkbuf->d16 = io_read16(bkinfo->reg_vaddr);
+		} else if (bkinfo->reg_rsize == 1) {
+			bkbuf->d8 = io_read8(bkinfo->reg_vaddr);
+		} else {
+			EMSG("Invalid reg_rsize=%d. reg_paddr=%08zX",
+				bkinfo->reg_rsize, bkinfo->reg_paddr);
+		}
+	} else {
+		EMSG("Read skip. reg_paddr=%08zX", bkinfo->reg_paddr);
+	}
+}
+
+static void write_register(struct reg_backup_info *bkinfo,
+			union reg_backup_buf *bkbuf)
+{
+	if (bkinfo->reg_vaddr != 0U) {
+		if (bkinfo->reg_wsize == 4) {
+			io_write32(bkbuf->d32, bkinfo->reg_vaddr);
+		} else if (bkinfo->reg_wsize == 2) {
+			io_write16(bkbuf->d16, bkinfo->reg_vaddr);
+		} else if (bkinfo->reg_wsize == 1) {
+			io_write8(bkbuf->d8, bkinfo->reg_vaddr);
+		} else {
+			EMSG("Invalid reg_wsize=%d. reg_paddr=%08zX",
+				bkinfo->reg_wsize, bkinfo->reg_paddr);
+		}
+	} else {
+		EMSG("Restore skip. reg_paddr=%08zX", bkinfo->reg_paddr);
+	}
+}
+
+static void save_register(struct reg_backup_info *bkinfo)
+{
+	read_register(bkinfo, &bkinfo->reg_buf);
+}
+
+static void restore_register(struct reg_backup_info *bkinfo)
+{
+	write_register(bkinfo, &bkinfo->reg_buf);
+}
+
+static TEE_Result suspend_to_ram_init(void)
+{
+	call_backup_funcs(convert_p2v_register);
+
+	return TEE_SUCCESS;
+}
+
+driver_init(suspend_to_ram_init);
+
+void suspend_to_ram_save(void)
+{
+	call_backup_funcs(save_register);
+	suspend_to_ram_call_cbfunc(SUS2RAM_STATE_SUSPEND);
+}
+
+void suspend_to_ram_restore(void)
+{
+	call_backup_funcs(restore_register);
+	suspend_to_ram_call_cbfunc(SUS2RAM_STATE_RESUME);
+}
+
+void suspend_to_ram_call_cbfunc(enum suspend_to_ram_state state)
+{
+	backup_call_t *cbfunc;
+	uint32_t cpu_id;
+
+	cbfunc = &__suspend_to_ram_cbfunc_start;
+	cpu_id = get_core_pos();
+
+	for (; cbfunc < &__suspend_to_ram_cbfunc_end; cbfunc++) {
+		(*cbfunc)(state, cpu_id);
+	}
+}
+
+void suspend_to_ram_init_helper(struct reg_backup_info *bkarray,
+			size_t array_num)
+{
+	size_t cnt;
+
+	for (cnt = 0U; cnt < array_num; cnt++) {
+		convert_p2v_register(&bkarray[cnt]);
+	}
+}
+
+void suspend_to_ram_save_helper(struct reg_backup_info *bkarray,
+			size_t array_num)
+{
+	size_t cnt;
+
+	for (cnt = 0U; cnt < array_num; cnt++) {
+		save_register(&bkarray[cnt]);
+	}
+}
+
+void suspend_to_ram_restore_helper(struct reg_backup_info *bkarray,
+			size_t array_num)
+{
+	size_t cnt;
+
+	for (cnt = 0U; cnt < array_num; cnt++) {
+		restore_register(&bkarray[cnt]);
+	}
+}
diff --git a/core/arch/arm/plat-rzg/rzg_suspend_to_ram.h b/core/arch/arm/plat-rzg/rzg_suspend_to_ram.h
new file mode 100644
index 0000000..aa5a539
--- /dev/null
+++ b/core/arch/arm/plat-rzg/rzg_suspend_to_ram.h
@@ -0,0 +1,62 @@
+/* SPDX-License-Identifier: BSD-2-Clause */
+/*
+ * Copyright (c) 2019-2020, Renesas Electronics Corporation
+ */
+
+#ifndef RZG_SUSPEND_TO_RAM_H
+#define RZG_SUSPEND_TO_RAM_H
+
+#include <types_ext.h>
+#include <tee_api_types.h>
+
+union reg_backup_buf {
+	uint32_t d32;
+	uint16_t d16;
+	uint8_t d8;
+};
+
+struct reg_backup_info {
+	paddr_t reg_paddr;	/* register Physical address */
+	int16_t reg_rsize;	/* register Read Byte size (1 or 2 or 4) */
+	int16_t reg_wsize;	/* register Write Byte size (1 or 2 or 4) */
+
+	/* private member */
+	vaddr_t reg_vaddr;	/* register Virtual address */
+	union reg_backup_buf reg_buf;
+};
+
+enum suspend_to_ram_state {
+	SUS2RAM_STATE_SUSPEND = 1,	/* CPU Suspend */
+	SUS2RAM_STATE_RESUME		/* CPU Resume */
+};
+
+typedef void (*backup_call_t)(enum suspend_to_ram_state state, uint32_t cpu_id);
+
+#define _def_attribete(symbol_name) \
+	__attribute__((used)) __attribute__((__section__(symbol_name)))
+
+#define _suspend_to_ram_backup(array_name) \
+	static struct reg_backup_info *__s2r_backup_##array_name \
+	_def_attribete(".suspend_to_ram_backup") = (array_name); \
+	static size_t __s2r_backup_num_##array_name \
+	_def_attribete(".suspend_to_ram_backup_num") = \
+	sizeof(array_name) / sizeof(struct reg_backup_info)
+
+#define suspend_to_ram_backup(array_name) \
+	_suspend_to_ram_backup(array_name)
+
+#define suspend_to_ram_cbfunc(fn) \
+	static backup_call_t __s2r_cbfunc_##fn \
+	_def_attribete(".suspend_to_ram_cbfunc") = (fn)
+
+void suspend_to_ram_save(void);
+void suspend_to_ram_restore(void);
+void suspend_to_ram_call_cbfunc(enum suspend_to_ram_state state);
+void suspend_to_ram_init_helper(struct reg_backup_info *bkarray,
+		size_t array_num);
+void suspend_to_ram_save_helper(struct reg_backup_info *bkarray,
+		size_t array_num);
+void suspend_to_ram_restore_helper(struct reg_backup_info *bkarray,
+		size_t array_num);
+
+#endif /* RZG_SUSPEND_TO_RAM_H */
diff --git a/core/arch/arm/plat-rzg/sub.mk b/core/arch/arm/plat-rzg/sub.mk
index 796befd..88201c7 100644
--- a/core/arch/arm/plat-rzg/sub.mk
+++ b/core/arch/arm/plat-rzg/sub.mk
@@ -2,4 +2,10 @@ global-incdirs-y += .
 srcs-y += main.c
 srcs-y += tee_common_otp.c
 
-cppflags-y += -DLTC_NO_PROTOTYPES -DRZG_DRAM_ECC=$(RZG_DRAM_ECC) -DRZG_ECC_FULL=$(RZG_ECC_FULL)
+ifeq (${PLATFORM_FLAVOR_hihope_rzg2n},y)
+  ifeq (${PMIC_ROHM_BD9571},1)
+    srcs-y += rzg_suspend_to_ram.c
+  endif
+endif
+
+cppflags-y += -DLTC_NO_PROTOTYPES -DRZG_DRAM_ECC=$(RZG_DRAM_ECC) -DRZG_ECC_FULL=$(RZG_ECC_FULL) -DPMIC_ROHM_BD9571=$(PMIC_ROHM_BD9571)
-- 
2.7.4

