From 392c3b4fc71e6b26a5e47e604e664ff5923ac49f Mon Sep 17 00:00:00 2001
From: hienhuynh <hien.huynh.px@renesas.com>
Date: Thu, 29 Apr 2021 13:18:57 +0700
Subject: [PATCH 2/3] arch: plat-rzg: add HW Unique Key support for TEE OTP

This patch will add support for getting HW Unique Key, it support for
feature TEE OTP.

Signed-off-by: Huynh Thanh Hung <hung.huynh.wz@renesas.com>
Signed-off-by: hienhuynh <hien.huynh.px@renesas.com>
---
 core/arch/arm/plat-rzg/main.c            |   1 +
 core/arch/arm/plat-rzg/platform_config.h |   3 +
 core/arch/arm/plat-rzg/sub.mk            |   3 +
 core/arch/arm/plat-rzg/tee_common_otp.c  | 118 +++++++++++++++++++++++++++++++
 4 files changed, 125 insertions(+)
 create mode 100644 core/arch/arm/plat-rzg/tee_common_otp.c

diff --git a/core/arch/arm/plat-rzg/main.c b/core/arch/arm/plat-rzg/main.c
index 31dfd08..6a1021b 100644
--- a/core/arch/arm/plat-rzg/main.c
+++ b/core/arch/arm/plat-rzg/main.c
@@ -11,6 +11,7 @@
 #include <mm/core_memprot.h>
 #include <platform_config.h>
 
+register_phys_mem_pgdir(MEM_AREA_IO_SEC, DEVICE0_BASE, DEVICE0_SIZE);
 register_phys_mem_pgdir(MEM_AREA_IO_SEC, CONSOLE_UART_BASE, SCIF_REG_SIZE);
 register_phys_mem_pgdir(MEM_AREA_IO_SEC, GICD_BASE, GIC_DIST_REG_SIZE);
 register_phys_mem_pgdir(MEM_AREA_IO_SEC, GICC_BASE, GIC_DIST_REG_SIZE);
diff --git a/core/arch/arm/plat-rzg/platform_config.h b/core/arch/arm/plat-rzg/platform_config.h
index eacc5a4..0638b53 100644
--- a/core/arch/arm/plat-rzg/platform_config.h
+++ b/core/arch/arm/plat-rzg/platform_config.h
@@ -12,6 +12,9 @@
 /* Make stacks aligned to data cache line length */
 #define STACK_ALIGNMENT		64
 
+#define DEVICE0_BASE		0xE6000000
+#define DEVICE0_SIZE		0x002FFFFF
+
 #define GIC_BASE		0xF1000000
 #define GICC_BASE		0xF1020000
 #define GICD_BASE		0xF1010000
diff --git a/core/arch/arm/plat-rzg/sub.mk b/core/arch/arm/plat-rzg/sub.mk
index 8ddc2fd..b194244 100644
--- a/core/arch/arm/plat-rzg/sub.mk
+++ b/core/arch/arm/plat-rzg/sub.mk
@@ -1,2 +1,5 @@
 global-incdirs-y += .
 srcs-y += main.c
+srcs-y += tee_common_otp.c
+
+cppflags-y += -DLTC_NO_PROTOTYPES
diff --git a/core/arch/arm/plat-rzg/tee_common_otp.c b/core/arch/arm/plat-rzg/tee_common_otp.c
new file mode 100644
index 0000000..43c00aa
--- /dev/null
+++ b/core/arch/arm/plat-rzg/tee_common_otp.c
@@ -0,0 +1,118 @@
+// SPDX-License-Identifier: BSD-2-Clause
+/*
+ * Copyright (c) 2014, STMicroelectronics International N.V.
+ * Copyright (c) 2019-2020, Renesas Electronics Corporation
+ */
+
+#include <stddef.h>
+#include <string.h>
+#include <stdlib.h>
+#include <trace.h>
+#include <io.h>
+#include <tee/tee_cryp_utl.h>
+#include <kernel/tee_common_otp.h>
+#include <kernel/panic.h>
+#include <mm/core_memprot.h>
+
+#include "tomcrypt.h"
+
+#define LIFEC_BASE	(0xE6110000U)	/* Life Cycle base address */
+
+static void read_uid_reg(uint8_t *read_uid, uint32_t read_num);
+
+static const uint32_t uid_read_num = 3U;
+static const uint32_t reg_size = sizeof(uint32_t);
+
+static void read_uid_reg(uint8_t *read_uid, uint32_t read_num)
+{
+	uint32_t uid;
+	uint32_t i;
+	uint32_t lifec_va;
+	uint32_t uid_addr;
+
+	lifec_va = (uint32_t) phys_to_virt_io(LIFEC_BASE, 0x50U);
+	uid_addr = lifec_va + 0x40U;
+
+	/* get uid from LifeC register. */
+	for (i = 0U; i < read_num; i++) {
+		uid = io_read32(uid_addr);
+		uid = TEE_U32_TO_BIG_ENDIAN(uid);
+		(void)memcpy(&read_uid[i * reg_size], &uid, reg_size);
+		uid_addr += reg_size;
+	}
+}
+
+TEE_Result tee_otp_get_hw_unique_key(struct tee_hw_unique_key *hwkey)
+{
+	TEE_Result rc = TEE_ERROR_GENERIC;
+
+	const uint8_t string_for_die_id_gen[] = "rzg_hw_unique_key";
+
+	const uint32_t uid_size = uid_read_num * reg_size;
+	const uint32_t str_size = sizeof(string_for_die_id_gen);
+
+	const uint32_t indata_size = uid_size + str_size;
+	const uint32_t digest_size = (uint32_t)TEE_SHA256_HASH_SIZE;
+
+	uint8_t input_data[indata_size];
+	uint8_t digest[digest_size];
+
+	if (hwkey != NULL) {
+		int res;
+		hash_state hs;
+		uint32_t i;
+
+		/* get uid from LifeC register. */
+		read_uid_reg(input_data, uid_read_num);
+
+		/* edit input data. add a fixed string. */
+		(void)memcpy(&input_data[uid_size], string_for_die_id_gen, str_size);
+
+		/* get hash for SHA256 */
+		if ((res = sha256_init(&hs)) == CRYPT_OK) {
+			if ((res = sha256_process(&hs, input_data, indata_size)) == CRYPT_OK) {
+				if ((res = sha256_done(&hs, digest)) == CRYPT_OK) {
+					for (i = 0U; i < HW_UNIQUE_KEY_LENGTH; i++) {
+						hwkey->data[i] = digest[i % digest_size];
+					}
+					rc = TEE_SUCCESS;	/* success */
+				} else {
+					EMSG("sha256_done() error. 0x%x", res);
+				}
+			} else {
+				EMSG("sha256_process() error. 0x%x", res);
+			}
+		} else {
+			EMSG("sha256_init() error. 0x%x", res);
+		}
+	} else {
+		EMSG("hwkey is 0x%p.", hwkey);
+	}
+
+	return rc;
+}
+
+int tee_otp_get_die_id(uint8_t *buffer, size_t len)
+{
+	int32_t rc = -1;
+
+	const uint32_t uid_size = uid_read_num * reg_size;
+
+	uint8_t read_uid[uid_size];
+
+	if ((buffer != NULL) && (len != 0U)) {
+		uint32_t i;
+
+		/* get uid from LifeC register. */
+		read_uid_reg(read_uid, uid_read_num);
+
+		for (i = 0U; i < len; i++) {
+			buffer[i] = read_uid[i % uid_size];
+		}
+		rc = 0;	/* success */
+	} else {
+		EMSG("buffer is 0x%p. len is %zu.", buffer, len);
+	}
+
+	return rc;
+}
-- 
2.7.4

